:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc_classes/CraftStation.xml.

.. _class_CraftStation:

CraftStation
============

**Inherits:** :ref:`NodeInventories<class_NodeInventories>` **<** ``Node``

Station where new :ref:`Crafting<class_Crafting>` processes are generated.

.. rst-class:: classref-introduction-group

Description
-----------

This node has a list of recipes that are generated based on the recipes in :ref:`NodeInventories.database<class_NodeInventories_property_database>` filtered by the :ref:`type<class_CraftStation_property_type>` of this station (If there is no type defined, the recipes will be those that also have no type defined. See more in :ref:`Recipe<class_Recipe>`)

The node also maintains a list of crafting processes currently being performed, which are created by :ref:`craft()<class_CraftStation_method_craft>` and finished by :ref:`finish_craft()<class_CraftStation_method_finish_craft>`.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``bool``                                                     | :ref:`auto_craft<class_CraftStation_property_auto_craft>`                                                   | ``false`` |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``bool``                                                     | :ref:`can_finish_craftings<class_CraftStation_property_can_finish_craftings>`                               | ``true``  |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``bool``                                                     | :ref:`can_processing_craftings<class_CraftStation_property_can_processing_craftings>`                       | ``true``  |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | :ref:`Array<class_Array>`\[:ref:`Crafting<class_Crafting>`\] | :ref:`craftings<class_CraftStation_property_craftings>`                                                     | ``[]``    |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``bool``                                                     | :ref:`has_limit_crafts<class_CraftStation_property_has_limit_crafts>`                                       | ``false`` |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | :ref:`Array<class_Array>`\[``NodePath``\]                    | :ref:`input_inventories<class_CraftStation_property_input_inventories>`                                     | ``[]``    |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``int``                                                      | :ref:`limit_number_crafts<class_CraftStation_property_limit_number_crafts>`                                 | ``4``     |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``bool``                                                     | :ref:`only_remove_ingredients_after_craft<class_CraftStation_property_only_remove_ingredients_after_craft>` | ``false`` |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | :ref:`Array<class_Array>`\[``NodePath``\]                    | :ref:`output_inventories<class_CraftStation_property_output_inventories>`                                   | ``[]``    |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``int``                                                      | :ref:`processing_mode<class_CraftStation_property_processing_mode>`                                         | ``0``     |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``int``                                                      | :ref:`tick_update_method<class_CraftStation_property_tick_update_method>`                                   | ``0``     |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | :ref:`CraftStationType<class_CraftStationType>`              | :ref:`type<class_CraftStation_property_type>`                                                               |           |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | ``String``                                                   | :ref:`type_id<class_CraftStation_property_type_id>`                                                         | ``""``    |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+
   | :ref:`Array<class_Array>`\[``int``\]                         | :ref:`valid_recipes<class_CraftStation_property_valid_recipes>`                                             | ``[]``    |
   +--------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`add_crafting<class_CraftStation_method_add_crafting>`\ (\ recipe_index\: ``int``, recipe\: :ref:`Recipe<class_Recipe>`\ )            |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`add_input_inventory<class_CraftStation_method_add_input_inventory>`\ (\ input_inventory\: :ref:`Inventory<class_Inventory>`\ )       |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | ``bool``                          | :ref:`can_craft<class_CraftStation_method_can_craft>`\ (\ recipe\: :ref:`Recipe<class_Recipe>`\ ) |const|                                  |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`cancel_craft<class_CraftStation_method_cancel_craft>`\ (\ crafting_index\: ``int``\ )                                                |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | ``bool``                          | :ref:`contains_ingredients<class_CraftStation_method_contains_ingredients>`\ (\ recipe\: :ref:`Recipe<class_Recipe>`\ ) |const|            |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`craft<class_CraftStation_method_craft>`\ (\ recipe_index\: ``int``\ )                                                                |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`deserialize<class_CraftStation_method_deserialize>`\ (\ data\: ``Dictionary``\ )                                                     |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`finish_crafting<class_CraftStation_method_finish_crafting>`\ (\ crafting_index\: ``int``\ )                                          |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Inventory<class_Inventory>` | :ref:`get_input_inventory<class_CraftStation_method_get_input_inventory>`\ (\ index\: ``int`` = 0\ ) |const|                               |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | ``bool``                          | :ref:`is_crafting<class_CraftStation_method_is_crafting>`\ (\ ) |const|                                                                    |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`load_valid_recipes<class_CraftStation_method_load_valid_recipes>`\ (\ )                                                              |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`remove_crafting<class_CraftStation_method_remove_crafting>`\ (\ crafting_index\: ``int``\ )                                          |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`remove_input_inventory<class_CraftStation_method_remove_input_inventory>`\ (\ input_inventory\: :ref:`Inventory<class_Inventory>`\ ) |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | ``Dictionary``                    | :ref:`serialize<class_CraftStation_method_serialize>`\ (\ ) |const|                                                                        |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`tick<class_CraftStation_method_tick>`\ (\ delta\: ``float``\ )                                                                       |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_CraftStation_signal_crafting_added:

.. rst-class:: classref-signal

**crafting_added**\ (\ crafting_index\: ``int``\ ) :ref:`🔗<class_CraftStation_signal_crafting_added>`

Emitted when a new crafting is added to the :ref:`craftings<class_CraftStation_property_craftings>` list. This signal is emitted after :ref:`add_crafting()<class_CraftStation_method_add_crafting>` method occurs.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_signal_crafting_removed:

.. rst-class:: classref-signal

**crafting_removed**\ (\ crafting_index\: ``int``\ ) :ref:`🔗<class_CraftStation_signal_crafting_removed>`

Emitted when a crafting is removed from the list of :ref:`craftings<class_CraftStation_property_craftings>`. This signal is emitted after :ref:`remove_crafting()<class_CraftStation_method_remove_crafting>` method occurs.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_signal_input_inventory_added:

.. rst-class:: classref-signal

**input_inventory_added**\ (\ input_inventory_path\: ``NodePath``\ ) :ref:`🔗<class_CraftStation_signal_input_inventory_added>`

Emitted when a new :ref:`Inventory<class_Inventory>` is added to the :ref:`input_inventories<class_CraftStation_property_input_inventories>` list. This signal is emitted after the :ref:`add_input_inventory()<class_CraftStation_method_add_input_inventory>` method occurs.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_signal_input_inventory_removed:

.. rst-class:: classref-signal

**input_inventory_removed**\ (\ input_inventory_path\: ``NodePath``\ ) :ref:`🔗<class_CraftStation_signal_input_inventory_removed>`

Emitted when a new :ref:`Inventory<class_Inventory>` is removed from the :ref:`input_inventories<class_CraftStation_property_input_inventories>` list. This signal is emitted after the :ref:`remove_input_inventory()<class_CraftStation_method_remove_input_inventory>` method occurs.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_signal_on_crafted:

.. rst-class:: classref-signal

**on_crafted**\ (\ recipe_index\: ``int``\ ) :ref:`🔗<class_CraftStation_signal_on_crafted>`

Emitted when a :ref:`Crafting<class_Crafting>` is successfully completed. This signal is emitted after the :ref:`finish_craft()<class_CraftStation_method_finish_craft>` method successfully completes.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_signal_on_request_craft:

.. rst-class:: classref-signal

**on_request_craft**\ (\ recipe_index\: ``int``\ ) :ref:`🔗<class_CraftStation_signal_on_request_craft>`

Emitted when a :ref:`Crafting<class_Crafting>` is requested, unlike crafting_added, this signal can happen even when the crafting cannot be done. This signal is emitted at the start of the :ref:`craft()<class_CraftStation_method_craft>` method.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_CraftStation_property_auto_craft:

.. rst-class:: classref-property

``bool`` **auto_craft** = ``false`` :ref:`🔗<class_CraftStation_property_auto_craft>`

.. rst-class:: classref-property-setget

- |void| **set_auto_craft**\ (\ value\: ``bool``\ )
- ``bool`` **get_auto_craft**\ (\ )

When activating the station upon identifying a change in the input inventories, it can call the :ref:`craft()<class_CraftStation_method_craft>` method when possible. This is used in the demo with the campfire, it activates this option when it is turned on with fuel.


.. tabs::

 .. code-tab:: gdscript

    func _update_is_burning():
        ...
        craft_station.auto_craft = is_burning
        ...



.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_can_finish_craftings:

.. rst-class:: classref-property

``bool`` **can_finish_craftings** = ``true`` :ref:`🔗<class_CraftStation_property_can_finish_craftings>`

.. rst-class:: classref-property-setget

- |void| **set_can_finish_craftings**\ (\ value\: ``bool``\ )
- ``bool`` **get_can_finish_craftings**\ (\ )

If true calls :ref:`finish_craft()<class_CraftStation_method_finish_craft>` after :ref:`Crafting<class_Crafting>` finish.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_can_processing_craftings:

.. rst-class:: classref-property

``bool`` **can_processing_craftings** = ``true`` :ref:`🔗<class_CraftStation_property_can_processing_craftings>`

.. rst-class:: classref-property-setget

- |void| **set_can_processing_craftings**\ (\ value\: ``bool``\ )
- ``bool`` **get_can_processing_craftings**\ (\ )

If true the station processes crafts based on the method :ref:`tick()<class_CraftStation_method_tick>` called (This method is called differently depending on the option chosen in :ref:`tick_update_method<class_CraftStation_property_tick_update_method>`).

In the demo the is_burning of campfire is used to turn this option on/off.


.. tabs::

 .. code-tab:: gdscript

    func _update_is_burning():
        ...
        craft_station.can_processing_craftings = is_burning
        ...



.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_craftings:

.. rst-class:: classref-property

:ref:`Array<class_Array>`\[:ref:`Crafting<class_Crafting>`\] **craftings** = ``[]`` :ref:`🔗<class_CraftStation_property_craftings>`

.. rst-class:: classref-property-setget

- |void| **set_craftings**\ (\ value\: :ref:`Array<class_Array>`\[:ref:`Crafting<class_Crafting>`\]\ )
- :ref:`Array<class_Array>`\[:ref:`Crafting<class_Crafting>`\] **get_craftings**\ (\ )

List of current craftings being processed, if the :ref:`processing_mode<class_CraftStation_property_processing_mode>` option is :ref:`processing_mode.Parallel<class_processing_mode_member_Parallel>` the processings will be happening together, otherwise only one will be processing and the others will be waiting for the first one to finish.

An example of using this list is in the demo in ``crafting_ui.gd``:


.. tabs::

 .. code-tab:: gdscript

    func set_crafting(station : CraftStation, crafting_index : int):
        crafting = station.craftings[crafting_index]
        var recipe = station.database.recipes[recipe_index]
        var item = recipe.products[0].item



.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_has_limit_crafts:

.. rst-class:: classref-property

``bool`` **has_limit_crafts** = ``false`` :ref:`🔗<class_CraftStation_property_has_limit_crafts>`

.. rst-class:: classref-property-setget

- |void| **set_has_limit_crafts**\ (\ value\: ``bool``\ )
- ``bool`` **get_has_limit_crafts**\ (\ )

If true the craftstation may have a limit of :ref:`limit_number_crafts<class_CraftStation_property_limit_number_crafts>` to process in the :ref:`craftings<class_CraftStation_property_craftings>` list.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_input_inventories:

.. rst-class:: classref-property

:ref:`Array<class_Array>`\[``NodePath``\] **input_inventories** = ``[]`` :ref:`🔗<class_CraftStation_property_input_inventories>`

.. rst-class:: classref-property-setget

- |void| **set_input_inventories**\ (\ value\: :ref:`Array<class_Array>`\[``NodePath``\]\ )
- :ref:`Array<class_Array>`\[``NodePath``\] **get_input_inventories**\ (\ )

List of :ref:`Inventory<class_Inventory>` items that will be used for crafting :ref:`Recipe.ingredients<class_Recipe_property_ingredients>` items.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_limit_number_crafts:

.. rst-class:: classref-property

``int`` **limit_number_crafts** = ``4`` :ref:`🔗<class_CraftStation_property_limit_number_crafts>`

.. rst-class:: classref-property-setget

- |void| **set_limit_number_crafts**\ (\ value\: ``int``\ )
- ``int`` **get_limit_number_crafts**\ (\ )

Limit the number of craftings in the :ref:`craftings<class_CraftStation_property_craftings>` list. This value is only set if :ref:`has_limit_crafts<class_CraftStation_property_has_limit_crafts>` is true.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_only_remove_ingredients_after_craft:

.. rst-class:: classref-property

``bool`` **only_remove_ingredients_after_craft** = ``false`` :ref:`🔗<class_CraftStation_property_only_remove_ingredients_after_craft>`

.. rst-class:: classref-property-setget

- |void| **set_only_remove_ingredients_after_craft**\ (\ value\: ``bool``\ )
- ``bool`` **get_only_remove_ingredients_after_craft**\ (\ )

Removes ingredients only when the crafting process finishes in :ref:`finish_craft()<class_CraftStation_method_finish_craft>`, this is used in the demo campfire to not remove meats while crafting is happening.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_output_inventories:

.. rst-class:: classref-property

:ref:`Array<class_Array>`\[``NodePath``\] **output_inventories** = ``[]`` :ref:`🔗<class_CraftStation_property_output_inventories>`

.. rst-class:: classref-property-setget

- |void| **set_output_inventories**\ (\ value\: :ref:`Array<class_Array>`\[``NodePath``\]\ )
- :ref:`Array<class_Array>`\[``NodePath``\] **get_output_inventories**\ (\ )

Craft product output inventory, after :ref:`finish_craft()<class_CraftStation_method_finish_craft>` happens a list of products from :ref:`Recipe.produts<class_Recipe_property_produts>` is added to these inventories. Note: An inventory can be part of both :ref:`input_inventories<class_CraftStation_property_input_inventories>` and :ref:`output_inventories<class_CraftStation_property_output_inventories>` at the same time.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_processing_mode:

.. rst-class:: classref-property

``int`` **processing_mode** = ``0`` :ref:`🔗<class_CraftStation_property_processing_mode>`

.. rst-class:: classref-property-setget

- |void| **set_processing_mode**\ (\ value\: ``int``\ )
- ``int`` **get_processing_mode**\ (\ )

Processing mode for :ref:`craftings<class_CraftStation_property_craftings>`. If set to ``Parallel``, all craftings will happen together, if set to ``Sequential`` only one craft will be processed at a time.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_tick_update_method:

.. rst-class:: classref-property

``int`` **tick_update_method** = ``0`` :ref:`🔗<class_CraftStation_property_tick_update_method>`

.. rst-class:: classref-property-setget

- |void| **set_tick_update_method**\ (\ value\: ``int``\ )
- ``int`` **get_tick_update_method**\ (\ )

Method for updating crafting processes. If marked as ``Process`` or ``Physic Process`` , the :ref:`tick()<class_CraftStation_method_tick>` call will happen internally in your respective godot calls. If marked as ``Custom`` the :ref:`tick()<class_CraftStation_method_tick>` method will not be called anywhere and you will have to call it in your code, it should be useful for multiplayer systems where the server manages this time.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_type:

.. rst-class:: classref-property

:ref:`CraftStationType<class_CraftStationType>` **type** :ref:`🔗<class_CraftStation_property_type>`

.. rst-class:: classref-property-setget

- |void| **set_type**\ (\ value\: :ref:`CraftStationType<class_CraftStationType>`\ )
- :ref:`CraftStationType<class_CraftStationType>` **get_type**\ (\ )

Defines the station type with resource :ref:`CraftStationType<class_CraftStationType>`. This resource must be created in :ref:`InventoryDatabase<class_InventoryDatabase>` with a custom editor. This defines which recipes will be valid for this station in the variable :ref:`valid_recipes<class_CraftStation_property_valid_recipes>`.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_type_id:

.. rst-class:: classref-property

``String`` **type_id** = ``""`` :ref:`🔗<class_CraftStation_property_type_id>`

.. rst-class:: classref-property-setget

- |void| **set_type_id**\ (\ value\: ``String``\ )
- ``String`` **get_type_id**\ (\ )

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_property_valid_recipes:

.. rst-class:: classref-property

:ref:`Array<class_Array>`\[``int``\] **valid_recipes** = ``[]`` :ref:`🔗<class_CraftStation_property_valid_recipes>`

.. rst-class:: classref-property-setget

- |void| **set_valid_recipes**\ (\ value\: :ref:`Array<class_Array>`\[``int``\]\ )
- :ref:`Array<class_Array>`\[``int``\] **get_valid_recipes**\ (\ )

Valid recipes that are filtered based on the defined station type. See in :ref:`type<class_CraftStation_property_type>`.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_CraftStation_method_add_crafting:

.. rst-class:: classref-method

|void| **add_crafting**\ (\ recipe_index\: ``int``, recipe\: :ref:`Recipe<class_Recipe>`\ ) :ref:`🔗<class_CraftStation_method_add_crafting>`

Adds a new crafting process with the ``recipe`` index ``recipe_index`` to the station's crafting process list. It emits the signal :ref:`crafting_added<class_CraftStation_signal_crafting_added>`.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_add_input_inventory:

.. rst-class:: classref-method

|void| **add_input_inventory**\ (\ input_inventory\: :ref:`Inventory<class_Inventory>`\ ) :ref:`🔗<class_CraftStation_method_add_input_inventory>`

Adds a new :ref:`Inventory<class_Inventory>` used as input for crafting. Items in this inventory will be used as :ref:`Recipe.ingredients<class_Recipe_property_ingredients>` and :ref:`Recipe.required_items<class_Recipe_property_required_items>` for crafting.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_can_craft:

.. rst-class:: classref-method

``bool`` **can_craft**\ (\ recipe\: :ref:`Recipe<class_Recipe>`\ ) |const| :ref:`🔗<class_CraftStation_method_can_craft>`

Returns true if the ``recipe`` can be created. It checks whether the ingredients are present in the :ref:`input_inventories<class_CraftStation_property_input_inventories>` and whether this recipe is of the :ref:`CraftStationType<class_CraftStationType>` type of this station.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_cancel_craft:

.. rst-class:: classref-method

|void| **cancel_craft**\ (\ crafting_index\: ``int``\ ) :ref:`🔗<class_CraftStation_method_cancel_craft>`

Cancels :ref:`Crafting<class_Crafting>` with index ``crafting_index`` and returns the items used by crafting to the input inventory. Note: Canceling does not return items to their previous positions, such as :ref:`Inventory<class_Inventory>` or a specific :ref:`Slot<class_Slot>`.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_contains_ingredients:

.. rst-class:: classref-method

``bool`` **contains_ingredients**\ (\ recipe\: :ref:`Recipe<class_Recipe>`\ ) |const| :ref:`🔗<class_CraftStation_method_contains_ingredients>`

Returns true if the input inventories have the :ref:`Recipe.ingredients<class_Recipe_property_ingredients>` and :ref:`Recipe.required_items<class_Recipe_property_required_items>` for this :ref:`Crafting<class_Crafting>` recipe.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_craft:

.. rst-class:: classref-method

|void| **craft**\ (\ recipe_index\: ``int``\ ) :ref:`🔗<class_CraftStation_method_craft>`

Calls a new craft with recipe from index ``recipe_index`` of :ref:`valid_recipes<class_CraftStation_property_valid_recipes>` to be processed (added to the ``member.craftings`` list). Note: It will only be included if :ref:`contains_ingredients()<class_CraftStation_method_contains_ingredients>` is true.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_deserialize:

.. rst-class:: classref-method

|void| **deserialize**\ (\ data\: ``Dictionary``\ ) :ref:`🔗<class_CraftStation_method_deserialize>`

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_finish_crafting:

.. rst-class:: classref-method

|void| **finish_crafting**\ (\ crafting_index\: ``int``\ ) :ref:`🔗<class_CraftStation_method_finish_crafting>`

Finishes a craft from the :ref:`craftings<class_CraftStation_property_craftings>` process list with index ``crafting_index``. This method removes the items from :ref:`Recipe.ingredients<class_Recipe_property_ingredients>` from the input inventories if the :ref:`only_remove_ingredients_after_craft<class_CraftStation_property_only_remove_ingredients_after_craft>` option is enabled. Adds the :ref:`Recipe.products<class_Recipe_property_products>` to the output inventories. The :ref:`on_crafted<class_CraftStation_signal_on_crafted>` is emitted when successfully removed.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_get_input_inventory:

.. rst-class:: classref-method

:ref:`Inventory<class_Inventory>` **get_input_inventory**\ (\ index\: ``int`` = 0\ ) |const| :ref:`🔗<class_CraftStation_method_get_input_inventory>`

Returns an input :ref:`Inventory<class_Inventory>` by the index of ``index``.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_is_crafting:

.. rst-class:: classref-method

``bool`` **is_crafting**\ (\ ) |const| :ref:`🔗<class_CraftStation_method_is_crafting>`

Returns true if the craftstation is processing a crafting.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_load_valid_recipes:

.. rst-class:: classref-method

|void| **load_valid_recipes**\ (\ ) :ref:`🔗<class_CraftStation_method_load_valid_recipes>`

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_remove_crafting:

.. rst-class:: classref-method

|void| **remove_crafting**\ (\ crafting_index\: ``int``\ ) :ref:`🔗<class_CraftStation_method_remove_crafting>`

Removes a crafting from the list of :ref:`craftings<class_CraftStation_property_craftings>` with index ``crafting_index``. This is called by :ref:`finish_crafting()<class_CraftStation_method_finish_crafting>`. Note: This method does not do the same as :ref:`finish_crafting()<class_CraftStation_method_finish_crafting>`, it does not add crafting after removal. It emits the signal :ref:`crafting_removed<class_CraftStation_signal_crafting_removed>`.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_remove_input_inventory:

.. rst-class:: classref-method

|void| **remove_input_inventory**\ (\ input_inventory\: :ref:`Inventory<class_Inventory>`\ ) :ref:`🔗<class_CraftStation_method_remove_input_inventory>`

Remove a :ref:`Inventory<class_Inventory>` used as input for crafting.

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_serialize:

.. rst-class:: classref-method

``Dictionary`` **serialize**\ (\ ) |const| :ref:`🔗<class_CraftStation_method_serialize>`

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_CraftStation_method_tick:

.. rst-class:: classref-method

|void| **tick**\ (\ delta\: ``float``\ ) :ref:`🔗<class_CraftStation_method_tick>`

Method called to update the list of :ref:`craftings<class_CraftStation_property_craftings>`. This method can be called internally or by your code by setting the :ref:`tick_update_method<class_CraftStation_property_tick_update_method>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`

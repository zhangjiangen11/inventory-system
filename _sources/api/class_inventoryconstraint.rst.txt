:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc_classes/InventoryConstraint.xml.

.. _class_InventoryConstraint:

InventoryConstraint
===================

**Inherits:** ``Resource``

Script that can be extended to define add rules for :ref:`Inventory<class_Inventory>` behaviors.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``bool`` | :ref:`_can_add_new_stack_on_inventory<class_InventoryConstraint_private_method__can_add_new_stack_on_inventory>`\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``\ ) |virtual| |
   +----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``bool`` | :ref:`_can_add_on_inventory<class_InventoryConstraint_private_method__can_add_on_inventory>`\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``\ ) |virtual|                     |
   +----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``int``  | :ref:`_get_amount_to_add<class_InventoryConstraint_private_method__get_amount_to_add>`\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``\ ) |virtual|                           |
   +----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``int``  | :ref:`_get_max_stack<class_InventoryConstraint_private_method__get_max_stack>`\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``, actual_max_stack\: ``int``\ ) |virtual|       |
   +----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_InventoryConstraint_private_method__can_add_new_stack_on_inventory:

.. rst-class:: classref-method

``bool`` **_can_add_new_stack_on_inventory**\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``\ ) |virtual| :ref:`ðŸ”—<class_InventoryConstraint_private_method__can_add_new_stack_on_inventory>`

This function can be extended to define whether or not the inventory accepts the creation of a stack.

Returns `true` the inventory can create new stack with ``item_id``.

Returns `false` the inventory cannot add new stack with ``item_id``.


.. tabs::

 .. code-tab:: gdscript

    # Example of stack limit in Inventory
    func _can_add_new_stack_on_inventory(inventory: Node, item_id: String, amount: int, properties: Dictionary) -> bool:
        return inventory.stacks.count -< 2



.. rst-class:: classref-item-separator

----

.. _class_InventoryConstraint_private_method__can_add_on_inventory:

.. rst-class:: classref-method

``bool`` **_can_add_on_inventory**\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``\ ) |virtual| :ref:`ðŸ”—<class_InventoryConstraint_private_method__can_add_on_inventory>`

This function can be extended to limit when an item can be added (regardless of whether it is adding a new stack or not).

Useful when you want the inventory to accept only one item or one category of item.

Returns `true` the inventory can add ``item_id``.

Returns `false` the inventory cannot add ``item_id``.


.. tabs::

 .. code-tab:: gdscript

    # Example of limiting the item to be added to the inventory
    func _can_add_on_inventory(inventory: Node, item_id: String, amount: int, properties: Dictionary) -> bool:
        return item_id == "wood"



.. rst-class:: classref-item-separator

----

.. _class_InventoryConstraint_private_method__get_amount_to_add:

.. rst-class:: classref-method

``int`` **_get_amount_to_add**\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``\ ) |virtual| :ref:`ðŸ”—<class_InventoryConstraint_private_method__get_amount_to_add>`

This function can be implemented to override the quantity that should be added to each inventory add interaction.

Useful when you want to limit the quantity that the inventory receives, for example an inventory linked to a processor and receives one item at a time, or does not receive anything if it is processing something.

Returns `int` with amount of ``item_id`` added in inventory.


.. tabs::

 .. code-tab:: gdscript

    # Example of limiting the amount of items to be added to the inventory
    var processing: bool
    func _get_amount_to_add(inventory: Node, item_id: String, amount: int, properties: Dictionary) -> int:
    if processing:
        return 0
    else: 
        return 1



.. rst-class:: classref-item-separator

----

.. _class_InventoryConstraint_private_method__get_max_stack:

.. rst-class:: classref-method

``int`` **_get_max_stack**\ (\ inventory\: ``Node``, item_id\: ``String``, amount\: ``int``, properties\: ``Dictionary``, actual_max_stack\: ``int``\ ) |virtual| :ref:`ðŸ”—<class_InventoryConstraint_private_method__get_max_stack>`

This function can be extended to override the max stack behavior of your inventory, very useful for creating inventories that do not respect the max stack number of items, 

for example an inventory of only wood where the max stack is higher than the max stack defined for the wood itself.

Returns `int` with max_stack of ``item_id`` added.


.. tabs::

 .. code-tab:: gdscript

    # Example of limiting the amount of items to be added to the inventory
    var processing: bool
    func _get_amount_to_add(inventory: Node, item_id: String, amount: int, properties: Dictionary) -> int:
    if processing:
        return 0
    else: 
        return 1



.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
